<!--1.小程序的数据绑定: {{}} ->Mustache语法 -->
<view>hello {{name}}</view>
<view>我的年龄 {{age}}</view>

<!-- 2.列表展示 wx:for-->
<block wx:for="{{student}}" wx:key="">
  <view>
    {{item.name}}--{{item.age}}
  </view>
</block>

<!-- 事件监听 -->
<view>当前计数:{{counter}}</view>
<button size="min" bindtap="handleBtnClick">+</button>
<button size="min" bindtap="handleSubtraction">-</button>


<!-- 1.事件处理的回顾 -->
<button bindtap="handleBtnClick" size="mini">按钮</button>
<button bind:tap="handleBtnClick" size="mini">按钮</button>
<button catche:tap="handleBtnClick" size="mini">按钮</button>

<!-- 2.常见的一些事件 -->
<view class="box" bind:touchstart="handleTouchStart" bind:touchmove="handlTouchMove" bind:touchend="handleTouchEnd" bind:tag="handleTap" bind:longpress="handleLongpress"></view>

<!-- 3.事件对象的分析 -->
<button id="btn" size="mini" bindtap="handleEventClick" bindtouchend="handleEventEnd">事件监听</button>
<!-- touches是用来记录当前有几个手指在小程序中触摸的以及对应的触摸点的信息 -->
<!-- touches上所有触摸点的列表 -->
<!-- changedtouches是用来记录手机触摸的 -->
<!-- changeTouches改变的触摸点的集合 -->

<view class="outer" id="outer" bindtap="handleOuter">
  外层
  <view class="inner" id="inner" bindtap="handleInner">内层</view>
</view>
<!-- 事件时是会冒泡 -->
<!-- currentTarget是触发事件的view
target是产生事件的view -->

<!-- 4.事件的传递参数 -->
<view class="container">
  <block wx:for="{{titles}}" wx:key="{{index}}">
    <view class="item" bindtap="handleItemClick" data-index="{{index}}" data-item="{{item}}">{{item}}</view>
  </block>
</view>

<!-- 5.事件冒泡和事件捕获 -->
<!-- 事件捕获是从外到内
事件冒泡是从内到外 -->
<!-- bind:一层层传递 -->
<!-- catch:阻止事件的进一步传递 -->
<view class="view1" capture-bind:tap="handleCatpureView1" bindtap="handleBindView1">
  <view class="view2" capture-bind:tap="handleCatpureView2" bindtap="handleBindView2">
    <view class="view3" capture-catch:tap="handleCatpureView3" bindtap="handleBindView3">

    </view>
  </view>
</view>

<!-- 1.使用自定义组件 -->
<my-cpn />

<!-- 2.自定义组件传递数据 -->
<my-prop title="我是自定义组件传过来参数" titleclass="redColor"></my-prop>
<my-prop titleclass="redColor"></my-prop>
<my-prop titleclass="blueColor"></my-prop>

<!-- 3.组件内部发布事件 -->
<!-- 监听increment这个事件，一旦监听到increment事件后就执行里面的handleIncrement函数 -->
<view>当前计数:{{num}}</view>
<my-event bind:increment="handleIncrement"></my-event>

<!-- 4.tab-control的练习 -->
<w-tab-control titles="{{['流行','新款','经典']}}" bind:itemClick="handleTabControlClick" />

<!-- 5.直接选中组件修改数据/调用方法 -->
<button size="mini" bind:tap="handleIncrementCpn">修改组件内部的数据</button>
<my-select class="sel-class" id="sel-id" />

<!-- 6.插槽的使用 -->
<!-- 6.1单个插槽的使用 -->
<my-slot>
  <button>我是插槽按钮</button>
</my-slot>
<my-slot>
  <text>我是插槽中的内容</text>
</my-slot>
-----------------
<!-- 6.2多个插槽的使用 -->
<!-- 注意事项
1.给每一个插槽起一个名字: name属性
2.必须在Component对象中添加一个选项:options{multipleSlots: true}
 -->
<my-slot-duo>
  <text slot="slot2">1111</text>
  <text slot="slot3">222</text>
  <text slot="slot1">333</text>
</my-slot-duo>