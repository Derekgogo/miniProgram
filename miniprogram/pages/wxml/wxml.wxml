<!--pages/wxml/wxml.wxml-->
<!-- class 和Class 区分大小写 -->
<view class="a" Class="b"></view>

<!-- 2.Mustache -->
<view>{{message}}</view>
<view>{{firstname}} {{lastname}}</view>
<view>{{firstname + ' ' + lastname}}</view>
<view>{{age >=18 ? '成':'未成'}}</view>
<view>{{nowTime}}</view>

<!-- bindtap监听按钮点击 -->
<button size="mini" bindtap="handleSwtichColor">切换</button>
<view class="box {{isActive ? 'active' : ''}}">哈哈</view>

<!-- block不用被渲染 可以提高性能-->
<!-- block不是一个组件,它仅仅是一个包装元素,不会再页面中做任何的渲染,只接受控制属性-->
<!-- wx:if 和wx:for是控制属性 -->
<!-- 使用block的两个好处 -->
<!-- 1.将需要进行遍历或者判断的内容进行包裹 -->
<!-- 2.将遍历和判断的属性放在block便签,不影响普通属性的阅读,提高代码的可读性 -->
<block wx:if="{{isActive}}">
  <view>哈哈好</view>
</block>

<!-- 3.item,index -->
<view wx:for="{{movies}}" wx:for-item="movie" wx:for-index="i" wx:key="">{{i}} {{movie}}</view>

<block wx:for="{{nums}}" wx:for-item="inner-nums" wx:key="">
  <block wx:for="{{inner-nums}}" wx:key="">
    {{item}}
  </block>
</block>

<!-- template -->
<!-- 之前的守小晨旭不支持自定义组件，为了进行代码的复用:template -->
<!-- 模版中包裹的内容,在没有被使用前,是不会进行任何的渲染 -->
<!-- <template name="contentItem">
  <button>{{btnText}}</button>
  <view>{{content}}</view>
</template> -->

<!-- 结论:include是不能导入模版 -->
<!-- 关于wxml的导入有两种方式:
import导入
  1.主要是导入template
  2.特点:不能进行递归
include引入:
  1.将公共的wxml中的组件抽取到一个文件中
  2.特点:不能导入template/wxs,可以进行递归导入
-->

<import src="../template/template.wxml" />


<template is="contentItem" data="{{btnText:'按钮',content:'哈哈'}}" />

<!-- wxs(weixin Script)是小程序的一套脚本语言 -->
<!-- wxml中是不能直接调用page/Component中定义的函数 -->
<!-- 但是某些情况,我们可以希望使用函数来处理wxml中的数据(类似于vue中的过滤器),这个时候就是用wxs了 -->
<!-- 错误写法 -->
<!-- <view>{{24.22333333.toFixed(2)}}</view> -->
<!-- 不可以调用某个函数 -->
<!-- <view>{{numberToFixed(32.222222)}}</view> -->